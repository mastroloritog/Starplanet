{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Accappi\\\\Desktop\\\\progetti\\\\cinemate\\\\src\\\\components\\\\CommentsSection.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Box, Typography, TextField, Button, IconButton } from '@mui/material';\nimport { useAuth } from '../contexts/AuthContext';\nimport SendIcon from '@mui/icons-material/Send';\nimport ReplyIcon from '@mui/icons-material/Reply';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CommentsSection({\n  mediaId,\n  type\n}) {\n  _s();\n  var _comments$find;\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n  const {\n    userId\n  } = useAuth();\n  const navigate = useNavigate();\n  const [replyingTo, setReplyingTo] = useState(null); // Stato per tracciare a quale commento si sta rispondendo\n\n  useEffect(() => {\n    const fetchComments = async () => {\n      try {\n        const response = await axios.post('http://localhost:5000/api/comments/getComments', {\n          movie_id: mediaId\n        });\n        if (response.data.success) {\n          const commentsWithReplies = await Promise.all(response.data.comments_list.map(async comment => {\n            const repliesResponse = await axios.post('http://localhost:5000/api/comments/getReplies', {\n              comment_id: comment.id\n            });\n            return {\n              ...comment,\n              replies: repliesResponse.data.success ? repliesResponse.data.replies_list : [] // Carica le risposte\n            };\n          }));\n          setComments(commentsWithReplies);\n        } else {\n          console.error('Error fetching comments:', response.data.message);\n        }\n      } catch (error) {\n        console.error('Error fetching comments:', error);\n      }\n    };\n    fetchComments();\n  }, [mediaId]);\n  const handleCommentSubmit = async () => {\n    if (userId === -1) {\n      navigate(\"/signin\");\n    } else {\n      try {\n        if (replyingTo) {\n          // Aggiungere una risposta\n          const response = await axios.post('http://localhost:5000/api/comments/addReply', {\n            userId,\n            commentId: replyingTo,\n            reply: newComment\n          });\n          if (response.data.success) {\n            const updatedComments = comments.map(comment => {\n              if (comment.id === replyingTo) {\n                return {\n                  ...comment,\n                  replies: [...comment.replies, {\n                    id: response.data.replyId,\n                    comment_id: replyingTo,\n                    user_id: userId,\n                    reply: newComment,\n                    created_at: new Date(),\n                    username: 'You, now' // Aggiorna con lo username attuale se disponibile\n                  }]\n                };\n              }\n              return comment;\n            });\n            setComments(updatedComments);\n            setNewComment('');\n            setReplyingTo(null); // Resetta lo stato di risposta\n          } else {\n            alert('Error adding reply: ' + response.data.message);\n          }\n        } else {\n          // Aggiungere un nuovo commento\n          const response = await axios.post('http://localhost:5000/api/comments/addComment', {\n            userId,\n            movieId: mediaId,\n            comment: newComment\n          });\n          if (response.data.success) {\n            const newCommentWithReplies = {\n              ...response.data.comment,\n              username: \"You, now\",\n              replies: [] // Le nuove risposte saranno vuote\n            };\n            setComments([...comments, newCommentWithReplies]);\n            setNewComment('');\n          } else {\n            alert('Error adding comment: ' + response.data.message);\n          }\n        }\n      } catch (error) {\n        alert('Error adding comment/reply: ' + error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      mt: 2\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mt: 1\n      },\n      children: comments.map(comment => /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          sx: {\n            fontWeight: 'bold'\n          },\n          children: [comment.username, \": \", comment.comment, /*#__PURE__*/_jsxDEV(IconButton, {\n            onClick: () => setReplyingTo(comment.id),\n            size: \"small\",\n            sx: {\n              ml: 1\n            },\n            children: /*#__PURE__*/_jsxDEV(ReplyIcon, {\n              fontSize: \"small\",\n              color: \"white\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this), comment.replies.map(reply => /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            ml: 3,\n            mt: 1\n          },\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: reply.username\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 19\n            }, this), \": \", reply.reply]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 17\n          }, this)\n        }, reply.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 15\n        }, this))]\n      }, comment.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), replyingTo && /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body2\",\n      sx: {\n        mt: 2,\n        mb: 1\n      },\n      children: [\"Stai rispondendo a: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: (_comments$find = comments.find(comment => comment.id === replyingTo)) === null || _comments$find === void 0 ? void 0 : _comments$find.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        mt: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        value: newComment,\n        onChange: e => setNewComment(e.target.value),\n        label: \"Add a comment\",\n        fullWidth: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleCommentSubmit,\n        startIcon: /*#__PURE__*/_jsxDEV(SendIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 22\n        }, this),\n        sx: {\n          ml: 1,\n          color: \"#fff\",\n          border: \"solid 1px #1E1E1E\",\n          '&:hover': {\n            borderColor: \"#fff\"\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n}\n_s(CommentsSection, \"IRDMvH5SOgV1MKk7ko3jlj8fJZ0=\", false, function () {\n  return [useAuth, useNavigate];\n});\n_c = CommentsSection;\nexport default CommentsSection;\nvar _c;\n$RefreshReg$(_c, \"CommentsSection\");","map":{"version":3,"names":["React","useState","useEffect","axios","Box","Typography","TextField","Button","IconButton","useAuth","SendIcon","ReplyIcon","useNavigate","jsxDEV","_jsxDEV","CommentsSection","mediaId","type","_s","_comments$find","comments","setComments","newComment","setNewComment","userId","navigate","replyingTo","setReplyingTo","fetchComments","response","post","movie_id","data","success","commentsWithReplies","Promise","all","comments_list","map","comment","repliesResponse","comment_id","id","replies","replies_list","console","error","message","handleCommentSubmit","commentId","reply","updatedComments","replyId","user_id","created_at","Date","username","alert","movieId","newCommentWithReplies","sx","mt","children","variant","fileName","_jsxFileName","lineNumber","columnNumber","mb","fontWeight","onClick","size","ml","fontSize","color","find","display","value","onChange","e","target","label","fullWidth","startIcon","border","borderColor","_c","$RefreshReg$"],"sources":["C:/Users/Accappi/Desktop/progetti/cinemate/src/components/CommentsSection.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Box, Typography, TextField, Button, IconButton } from '@mui/material';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport ReplyIcon from '@mui/icons-material/Reply';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction CommentsSection({ mediaId, type }) {\r\n  const [comments, setComments] = useState([]);\r\n  const [newComment, setNewComment] = useState('');\r\n  const { userId } = useAuth();\r\n  const navigate = useNavigate();\r\n  const [replyingTo, setReplyingTo] = useState(null); // Stato per tracciare a quale commento si sta rispondendo\r\n\r\n  useEffect(() => {\r\n    const fetchComments = async () => {\r\n      try {\r\n        const response = await axios.post('http://localhost:5000/api/comments/getComments', { movie_id: mediaId });\r\n        if (response.data.success) {\r\n          const commentsWithReplies = await Promise.all(response.data.comments_list.map(async (comment) => {\r\n            const repliesResponse = await axios.post('http://localhost:5000/api/comments/getReplies', { comment_id: comment.id });\r\n\r\n            return {\r\n              ...comment,\r\n              replies: repliesResponse.data.success ? repliesResponse.data.replies_list : [] // Carica le risposte\r\n            };\r\n          }));\r\n          setComments(commentsWithReplies);\r\n        } else {\r\n          console.error('Error fetching comments:', response.data.message);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching comments:', error);\r\n      }\r\n    };\r\n\r\n    fetchComments();\r\n  }, [mediaId]);\r\n\r\n  const handleCommentSubmit = async () => {\r\n    if (userId === -1) {\r\n      navigate(\"/signin\");\r\n    } else {\r\n      try {\r\n        if (replyingTo) {\r\n          // Aggiungere una risposta\r\n          const response = await axios.post('http://localhost:5000/api/comments/addReply', {\r\n            userId,\r\n            commentId: replyingTo,\r\n            reply: newComment\r\n          });\r\n          if (response.data.success) {\r\n            const updatedComments = comments.map(comment => {\r\n              if (comment.id === replyingTo) {\r\n                return {\r\n                  ...comment,\r\n                  replies: [\r\n                    ...comment.replies,\r\n                    {\r\n                      id: response.data.replyId,\r\n                      comment_id: replyingTo,\r\n                      user_id: userId,\r\n                      reply: newComment,\r\n                      created_at: new Date(),\r\n                      username: 'You, now', // Aggiorna con lo username attuale se disponibile\r\n                    }\r\n                  ]\r\n                };\r\n              }\r\n              return comment;\r\n            });\r\n            setComments(updatedComments);\r\n            setNewComment('');\r\n            setReplyingTo(null); // Resetta lo stato di risposta\r\n          } else {\r\n            alert('Error adding reply: ' + response.data.message);\r\n          }\r\n        } else {\r\n          // Aggiungere un nuovo commento\r\n          const response = await axios.post('http://localhost:5000/api/comments/addComment', {\r\n            userId,\r\n            movieId: mediaId,\r\n            comment: newComment\r\n          });\r\n          if (response.data.success) {\r\n            const newCommentWithReplies = {\r\n              ...response.data.comment,\r\n              username: \"You, now\",\r\n              replies: [] // Le nuove risposte saranno vuote\r\n            };\r\n            setComments([...comments, newCommentWithReplies]);\r\n            setNewComment('');\r\n          } else {\r\n            alert('Error adding comment: ' + response.data.message);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        alert('Error adding comment/reply: ' + error);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ mt: 2 }}>\r\n      <Typography variant=\"h6\">Comments</Typography>\r\n      <Box sx={{ mt: 1 }}>\r\n        {comments.map((comment) => (\r\n          <Box key={comment.id} sx={{ mb: 3 }}>\r\n            <Typography variant=\"body1\" sx={{ fontWeight: 'bold' }}>\r\n              {comment.username}: {comment.comment}\r\n              <IconButton onClick={() => setReplyingTo(comment.id)} size=\"small\" sx={{ ml: 1 }}>\r\n                <ReplyIcon fontSize=\"small\" color='white'/>\r\n              </IconButton>\r\n            </Typography>\r\n            {/* Sezione risposte per ciascun commento */}\r\n            {comment.replies.map((reply) => (\r\n              <Box key={reply.id} sx={{ ml: 3, mt: 1 }}>\r\n                <Typography variant=\"body2\">\r\n                  <strong>{reply.username}</strong>: {reply.reply}\r\n                </Typography>\r\n              </Box>\r\n            ))}\r\n          </Box>\r\n        ))}\r\n      </Box>\r\n      {replyingTo && (\r\n        <Typography variant=\"body2\" sx={{ mt: 2, mb: 1 }}>\r\n          Stai rispondendo a: <strong>{comments.find(comment => comment.id === replyingTo)?.username}</strong>\r\n        </Typography>\r\n      )}\r\n      <Box sx={{ display: 'flex', mt: 2 }}>\r\n        <TextField\r\n          value={newComment}\r\n          onChange={(e) => setNewComment(e.target.value)}\r\n          label=\"Add a comment\"\r\n          fullWidth\r\n        />\r\n        <Button\r\n          onClick={handleCommentSubmit}\r\n          startIcon={<SendIcon />}\r\n          sx={{\r\n            ml: 1,\r\n            color: \"#fff\",\r\n            border: \"solid 1px #1E1E1E\",\r\n            '&:hover': {\r\n              borderColor: \"#fff\",\r\n            }\r\n          }}\r\n        />\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default CommentsSection;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}