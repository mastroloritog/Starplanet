{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Accappi\\\\Desktop\\\\progetti\\\\cinemate\\\\src\\\\pages\\\\PopularMoviesPage.js\",\n  _s = $RefreshSig$();\n// Old Without load other during scroll\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import MovieList from './../components/MovieList';\n// import { Container, CircularProgress } from '@mui/material';\n\n// function PopularMoviesPage() {\n//   const [popularMovies, setPopularMovies] = useState([]);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const fetchMovies = async () => {\n//       try {\n//         const response = await axios.get('http://localhost:5000/api/movies/top100movies');\n//         const movies = response.data;\n//         console.log(response.data[0])\n//         setPopularMovies(movies);\n//       } catch (error) {\n//         alert('Error fetching movies: ' + error);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchMovies();\n//   }, []);\n\n//   if (loading) {\n//     return (\n//       <Container>\n//         <CircularProgress />\n//       </Container>\n//     );\n//   }\n\n//   return (\n//     <Container>\n//       <MovieList\n//         title=\"Popular Movies\"\n//         movies={popularMovies}\n//       />\n//     </Container>\n//   );\n// }\n\n// export default PopularMoviesPage;\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport MovieList from './../components/MovieList';\nimport { Container, CircularProgress } from '@mui/material';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PopularMoviesPage() {\n  _s();\n  const [popularMovies, setPopularMovies] = useState([]);\n  const [page, setPage] = useState(1);\n  const [hasMore, setHasMore] = useState(true);\n  useEffect(() => {\n    fetchMovies(page);\n  }, [page]);\n  const fetchMovies = async page => {\n    try {\n      const response = await axios.get(`http://localhost:5000/api/movies/top100movies?page=${page}&limit=6`);\n      const movies = response.data;\n      setPopularMovies(prevMovies => [...prevMovies, ...movies]);\n      if (movies.length < 6) {\n        setHasMore(false);\n      }\n    } catch (error) {\n      alert('Error fetching movies: ' + error);\n    }\n  };\n  const fetchMoreMovies = () => {\n    setPage(prevPage => prevPage + 1);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n      dataLength: popularMovies.length,\n      next: fetchMoreMovies,\n      hasMore: hasMore,\n      loader: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this),\n      endMessage: /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          textAlign: 'center'\n        },\n        children: \"Yay! You have seen it all\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(MovieList, {\n        title: \"Popular Movies\",\n        movies: popularMovies\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n}\n_s(PopularMoviesPage, \"8D24d8FxD9L27uFLf3ppsP8kUKE=\");\n_c = PopularMoviesPage;\nexport default PopularMoviesPage;\nvar _c;\n$RefreshReg$(_c, \"PopularMoviesPage\");","map":{"version":3,"names":["React","useState","useEffect","axios","MovieList","Container","CircularProgress","InfiniteScroll","jsxDEV","_jsxDEV","PopularMoviesPage","_s","popularMovies","setPopularMovies","page","setPage","hasMore","setHasMore","fetchMovies","response","get","movies","data","prevMovies","length","error","alert","fetchMoreMovies","prevPage","children","dataLength","next","loader","fileName","_jsxFileName","lineNumber","columnNumber","endMessage","style","textAlign","title","_c","$RefreshReg$"],"sources":["C:/Users/Accappi/Desktop/progetti/cinemate/src/pages/PopularMoviesPage.js"],"sourcesContent":["// Old Without load other during scroll\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n// import MovieList from './../components/MovieList';\r\n// import { Container, CircularProgress } from '@mui/material';\r\n\r\n// function PopularMoviesPage() {\r\n//   const [popularMovies, setPopularMovies] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n\r\n//   useEffect(() => {\r\n//     const fetchMovies = async () => {\r\n//       try {\r\n//         const response = await axios.get('http://localhost:5000/api/movies/top100movies');\r\n//         const movies = response.data;\r\n//         console.log(response.data[0])\r\n//         setPopularMovies(movies);\r\n//       } catch (error) {\r\n//         alert('Error fetching movies: ' + error);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     fetchMovies();\r\n//   }, []);\r\n\r\n//   if (loading) {\r\n//     return (\r\n//       <Container>\r\n//         <CircularProgress />\r\n//       </Container>\r\n//     );\r\n//   }\r\n\r\n//   return (\r\n//     <Container>\r\n//       <MovieList\r\n//         title=\"Popular Movies\"\r\n//         movies={popularMovies}\r\n//       />\r\n//     </Container>\r\n//   );\r\n// }\r\n\r\n// export default PopularMoviesPage;\r\n\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport MovieList from './../components/MovieList';\r\nimport { Container, CircularProgress } from '@mui/material';\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\n\r\nfunction PopularMoviesPage() {\r\n  const [popularMovies, setPopularMovies] = useState([]);\r\n  const [page, setPage] = useState(1);\r\n  const [hasMore, setHasMore] = useState(true);\r\n\r\n  useEffect(() => {\r\n    fetchMovies(page);\r\n  }, [page]);\r\n\r\n  const fetchMovies = async (page) => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:5000/api/movies/top100movies?page=${page}&limit=6`);\r\n      const movies = response.data;\r\n      setPopularMovies((prevMovies) => [...prevMovies, ...movies]);\r\n      if (movies.length < 6) {\r\n        setHasMore(false);\r\n      }\r\n    } catch (error) {\r\n      alert('Error fetching movies: ' + error);\r\n    }\r\n  };\r\n\r\n  const fetchMoreMovies = () => {\r\n    setPage((prevPage) => prevPage + 1);\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <InfiniteScroll\r\n        dataLength={popularMovies.length}\r\n        next={fetchMoreMovies}\r\n        hasMore={hasMore}\r\n        loader={<CircularProgress />}\r\n        endMessage={<p style={{ textAlign: 'center' }}>Yay! You have seen it all</p>}\r\n      >\r\n        <MovieList title=\"Popular Movies\" movies={popularMovies} />\r\n      </InfiniteScroll>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default PopularMoviesPage;\r\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,2BAA2B;AACjD,SAASC,SAAS,EAAEC,gBAAgB,QAAQ,eAAe;AAC3D,OAAOC,cAAc,MAAM,iCAAiC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7D,SAASC,iBAAiBA,CAAA,EAAG;EAAAC,EAAA;EAC3B,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACa,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC;EACnC,MAAM,CAACe,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACdgB,WAAW,CAACJ,IAAI,CAAC;EACnB,CAAC,EAAE,CAACA,IAAI,CAAC,CAAC;EAEV,MAAMI,WAAW,GAAG,MAAOJ,IAAI,IAAK;IAClC,IAAI;MACF,MAAMK,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,GAAG,CAAC,sDAAsDN,IAAI,UAAU,CAAC;MACtG,MAAMO,MAAM,GAAGF,QAAQ,CAACG,IAAI;MAC5BT,gBAAgB,CAAEU,UAAU,IAAK,CAAC,GAAGA,UAAU,EAAE,GAAGF,MAAM,CAAC,CAAC;MAC5D,IAAIA,MAAM,CAACG,MAAM,GAAG,CAAC,EAAE;QACrBP,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACdC,KAAK,CAAC,yBAAyB,GAAGD,KAAK,CAAC;IAC1C;EACF,CAAC;EAED,MAAME,eAAe,GAAGA,CAAA,KAAM;IAC5BZ,OAAO,CAAEa,QAAQ,IAAKA,QAAQ,GAAG,CAAC,CAAC;EACrC,CAAC;EAED,oBACEnB,OAAA,CAACJ,SAAS;IAAAwB,QAAA,eACRpB,OAAA,CAACF,cAAc;MACbuB,UAAU,EAAElB,aAAa,CAACY,MAAO;MACjCO,IAAI,EAAEJ,eAAgB;MACtBX,OAAO,EAAEA,OAAQ;MACjBgB,MAAM,eAAEvB,OAAA,CAACH,gBAAgB;QAAA2B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAE;MAC7BC,UAAU,eAAE5B,OAAA;QAAG6B,KAAK,EAAE;UAAEC,SAAS,EAAE;QAAS,CAAE;QAAAV,QAAA,EAAC;MAAyB;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAE;MAAAP,QAAA,eAE7EpB,OAAA,CAACL,SAAS;QAACoC,KAAK,EAAC,gBAAgB;QAACnB,MAAM,EAAET;MAAc;QAAAqB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7C;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAEhB;AAACzB,EAAA,CAvCQD,iBAAiB;AAAA+B,EAAA,GAAjB/B,iBAAiB;AAyC1B,eAAeA,iBAAiB;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}